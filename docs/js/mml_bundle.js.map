{"version":3,"file":"mml_bundle.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,GACf,CATD,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBL,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,GAAO,G,4DCE9D,MAoBMC,EAAQ,CAACC,EAAOC,IAAY,GAAKD,GAAU,EAAIC,GAO/CC,EAAQC,GAAQ,IAAMC,KAAKC,IAAI,GAAIF,EAAM,IAAM,IAU/CG,EAAK,CACT,CAEoB,KAAMJ,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,GAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAEzH,CAEE,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAAO,KAAMA,EAAK,KAAO,KAAMA,EAAK,KAAO,KAAMA,EAAK,KACvH,KAAMA,EAAK,IAAO,KAAMA,EAAK,IAAO,KAAMA,EAAK,KAAO,KAAMA,EAAK,KAAO,KAAMA,E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","sources":["webpack://mml/webpack/universalModuleDefinition","webpack://mml/webpack/bootstrap","webpack://mml/webpack/runtime/define property getters","webpack://mml/webpack/runtime/hasOwnProperty shorthand","webpack://mml/webpack/runtime/make namespace object","webpack://mml/./src/define.js","webpack://mml/./src/assemble.js","webpack://mml/./src/parser.js","webpack://mml/./src/play.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"mml\"] = factory();\n\telse\n\t\troot[\"mml\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// =============================================================================\r\n// define.js\r\n// Copyright © 2021- gaku.iwa All Rights Reserved.\r\n// =============================================================================\r\n\r\n// -----------------------------------------------------------------------------\r\n// 下限値、上限値、規定値 他\r\nconst rest = `r `;\r\n// prettier-ignore\r\nconst T = { min:  1, max: 480, def: 120 };\r\n// prettier-ignore\r\nconst V = { min:  0, max:  15, def:  10 };\r\n// prettier-ignore\r\nconst P = { min: -8, max:  +8, def:   0, center: 0, left: -8, right: +8 };\r\n// prettier-ignore\r\nconst O = { min:  1, max:   9, def:   4 };\r\n// prettier-ignore\r\nconst Q = { min:  1, max:   8, def:   8 };\r\n\r\n// -----------------------------------------------------------------------------\r\n// 秒数へ変換\r\n// -----------------------------------------------------------------------------\r\n// テンポと音長から秒数を算出する\r\n// ex.) 「toSEC(120, 4)」=> 0.5[sec]を返却します\r\n//      「t120 c4」\r\n//        =>  １分間に４分音符120個分の速さで「ド」を４分音符の長さで鳴らす\r\n//            Web Audio APIには、具体的な「秒数指定」が必要なので…\r\nconst toSEC = (tempo, length) => (60 / tempo) * (4 / length);\r\n\r\n// -----------------------------------------------------------------------------\r\n// 周波数へ変換\r\n// -----------------------------------------------------------------------------\r\n// num = 69（o5 a => 440Hz）を基準に平均律の周波数値へ変換する\r\n// => 平均律は１オクターブを12等分した音階のこと\r\nconst toHz = (num) => 440 * Math.pow(2, (num - 69) / 12);\r\n\r\n// -----------------------------------------------------------------------------\r\n// 音階テーブル（「o5 a」=> 440Hzが基準）\r\n// -----------------------------------------------------------------------------\r\n// ex.1) 「o4 a-」=> nn[4][\"a-\"] を指定する\r\n// ex.2) 「o5 a 」=> nn[5][\"a \"] を指定する\r\n// ex.3) 「o6 a#」=> nn[6][\"a#\"] を指定する\r\n// -----------------------------------------------------------------------------\r\n// prettier-ignore\r\nconst nn = [\r\n  {\r\n    // o0\r\n                      \"d-\": toHz(0x01), \"e-\": toHz(0x03), \"f-\": toHz(0x04), \"g-\": toHz(0x06), \"a-\": toHz(0x08), \"b-\": toHz(0x0a), // 10\r\n    \"c \": toHz(0x00), \"d \": toHz(0x02), \"e \": toHz(0x04), \"f \": toHz(0x05), \"g \": toHz(0x07), \"a \": toHz(0x09), \"b \": toHz(0x0b), // 11\r\n    \"c#\": toHz(0x01), \"d#\": toHz(0x03), \"e#\": toHz(0x05), \"f#\": toHz(0x06), \"g#\": toHz(0x08), \"a#\": toHz(0x0a), \"b#\": toHz(0x0c), // 12\r\n  },\r\n  {\r\n    // o1\r\n    \"c-\": toHz(0x0b), \"d-\": toHz(0x0d), \"e-\": toHz(0x0f), \"f-\": toHz(0x10), \"g-\": toHz(0x12), \"a-\": toHz(0x14), \"b-\": toHz(0x16), // 22\r\n    \"c \": toHz(0x0c), \"d \": toHz(0x0e), \"e \": toHz(0x10), \"f \": toHz(0x11), \"g \": toHz(0x13), \"a \": toHz(0x15), \"b \": toHz(0x17), // 23\r\n    \"c#\": toHz(0x0d), \"d#\": toHz(0x0f), \"e#\": toHz(0x11), \"f#\": toHz(0x12), \"g#\": toHz(0x14), \"a#\": toHz(0x16), \"b#\": toHz(0x18), // 24\r\n  },\r\n  {\r\n    // o2\r\n    \"c-\": toHz(0x17), \"d-\": toHz(0x19), \"e-\": toHz(0x1b), \"f-\": toHz(0x1c), \"g-\": toHz(0x1e), \"a-\": toHz(0x20), \"b-\": toHz(0x22), // 34\r\n    \"c \": toHz(0x18), \"d \": toHz(0x1a), \"e \": toHz(0x1c), \"f \": toHz(0x1d), \"g \": toHz(0x1f), \"a \": toHz(0x21), \"b \": toHz(0x23), // 35\r\n    \"c#\": toHz(0x19), \"d#\": toHz(0x1b), \"e#\": toHz(0x1d), \"f#\": toHz(0x1e), \"g#\": toHz(0x20), \"a#\": toHz(0x22), \"b#\": toHz(0x24), // 36\r\n  },\r\n  {\r\n    // o3\r\n    \"c-\": toHz(0x23), \"d-\": toHz(0x25), \"e-\": toHz(0x27), \"f-\": toHz(0x28), \"g-\": toHz(0x2a), \"a-\": toHz(0x2c), \"b-\": toHz(0x2e), // 46\r\n    \"c \": toHz(0x24), \"d \": toHz(0x26), \"e \": toHz(0x28), \"f \": toHz(0x29), \"g \": toHz(0x2b), \"a \": toHz(0x2d), \"b \": toHz(0x2f), // 47\r\n    \"c#\": toHz(0x25), \"d#\": toHz(0x27), \"e#\": toHz(0x29), \"f#\": toHz(0x2a), \"g#\": toHz(0x2c), \"a#\": toHz(0x2e), \"b#\": toHz(0x30), // 48\r\n  },\r\n  {\r\n    // o4\r\n    \"c-\": toHz(0x2f), \"d-\": toHz(0x31), \"e-\": toHz(0x33), \"f-\": toHz(0x34), \"g-\": toHz(0x36), \"a-\": toHz(0x38), \"b-\": toHz(0x3a), // 58\r\n    \"c \": toHz(0x30), \"d \": toHz(0x32), \"e \": toHz(0x34), \"f \": toHz(0x35), \"g \": toHz(0x37), \"a \": toHz(0x39), \"b \": toHz(0x3b), // 59\r\n    \"c#\": toHz(0x31), \"d#\": toHz(0x33), \"e#\": toHz(0x35), \"f#\": toHz(0x36), \"g#\": toHz(0x38), \"a#\": toHz(0x3a), \"b#\": toHz(0x3c), // 60\r\n  },\r\n  {\r\n    // o5\r\n    \"c-\": toHz(0x3b), \"d-\": toHz(0x3d), \"e-\": toHz(0x3f), \"f-\": toHz(0x40), \"g-\": toHz(0x42), \"a-\": toHz(0x44), \"b-\": toHz(0x46), // 70\r\n    \"c \": toHz(0x3c), \"d \": toHz(0x3e), \"e \": toHz(0x40), \"f \": toHz(0x41), \"g \": toHz(0x43), \"a \": toHz(0x45), \"b \": toHz(0x47), // 71\r\n    \"c#\": toHz(0x3d), \"d#\": toHz(0x3f), \"e#\": toHz(0x41), \"f#\": toHz(0x42), \"g#\": toHz(0x44), \"a#\": toHz(0x46), \"b#\": toHz(0x48), // 72\r\n  },\r\n  {\r\n    // o6\r\n    \"c-\": toHz(0x47), \"d-\": toHz(0x49), \"e-\": toHz(0x4b), \"f-\": toHz(0x4c), \"g-\": toHz(0x4e), \"a-\": toHz(0x50), \"b-\": toHz(0x52), // 82\r\n    \"c \": toHz(0x48), \"d \": toHz(0x4a), \"e \": toHz(0x4c), \"f \": toHz(0x4d), \"g \": toHz(0x4f), \"a \": toHz(0x51), \"b \": toHz(0x53), // 83\r\n    \"c#\": toHz(0x49), \"d#\": toHz(0x4b), \"e#\": toHz(0x4d), \"f#\": toHz(0x4e), \"g#\": toHz(0x50), \"a#\": toHz(0x52), \"b#\": toHz(0x54), // 84\r\n  },\r\n  {\r\n    // o7\r\n    \"c-\": toHz(0x53), \"d-\": toHz(0x55), \"e-\": toHz(0x57), \"f-\": toHz(0x58), \"g-\": toHz(0x5a), \"a-\": toHz(0x5c), \"b-\": toHz(0x5e), // 94\r\n    \"c \": toHz(0x54), \"d \": toHz(0x56), \"e \": toHz(0x58), \"f \": toHz(0x59), \"g \": toHz(0x5b), \"a \": toHz(0x5d), \"b \": toHz(0x5f), // 95\r\n    \"c#\": toHz(0x55), \"d#\": toHz(0x57), \"e#\": toHz(0x59), \"f#\": toHz(0x5a), \"g#\": toHz(0x5c), \"a#\": toHz(0x5e), \"b#\": toHz(0x60), // 96\r\n  },\r\n  {\r\n    // o8\r\n    \"c-\": toHz(0x5f), \"d-\": toHz(0x61), \"e-\": toHz(0x63), \"f-\": toHz(0x64), \"g-\": toHz(0x66), \"a-\": toHz(0x68), \"b-\": toHz(0x6a), // 106\r\n    \"c \": toHz(0x60), \"d \": toHz(0x62), \"e \": toHz(0x64), \"f \": toHz(0x65), \"g \": toHz(0x67), \"a \": toHz(0x69), \"b \": toHz(0x6b), // 107\r\n    \"c#\": toHz(0x61), \"d#\": toHz(0x63), \"e#\": toHz(0x65), \"f#\": toHz(0x66), \"g#\": toHz(0x68), \"a#\": toHz(0x6a), \"b#\": toHz(0x6c), // 108\r\n  },\r\n  {\r\n    // o9\r\n    \"c-\": toHz(0x6b), \"d-\": toHz(0x6d), \"e-\": toHz(0x6f), \"f-\": toHz(0x70), \"g-\": toHz(0x72), \"a-\": toHz(0x74), \"b-\": toHz(0x76), // 118\r\n    \"c \": toHz(0x6c), \"d \": toHz(0x6e), \"e \": toHz(0x70), \"f \": toHz(0x71), \"g \": toHz(0x73), \"a \": toHz(0x75), \"b \": toHz(0x77), // 119\r\n    \"c#\": toHz(0x6d), \"d#\": toHz(0x6f), \"e#\": toHz(0x71), \"f#\": toHz(0x72), \"g#\": toHz(0x74), \"a#\": toHz(0x76), \"b#\": toHz(0x78), // 120\r\n  },\r\n  {\r\n    // o10\r\n    \"c-\": toHz(0x77), \"d-\": toHz(0x79), \"e-\": toHz(0x7b), \"f-\": toHz(0x7c), \"g-\": toHz(0x7e),\r\n    \"c \": toHz(0x78), \"d \": toHz(0x7a), \"e \": toHz(0x7c), \"f \": toHz(0x7d), \"g \": toHz(0x7f),\r\n    \"c#\": toHz(0x79), \"d#\": toHz(0x7b), \"e#\": toHz(0x7d), \"f#\": toHz(0x7e),\r\n  },\r\n];\r\n\r\nexport { O, P, Q, T, V, nn, rest, toHz, toSEC };\r\n","// =============================================================================\r\n// assemble.js\r\n// Copyright © 2021- gaku.iwa All Rights Reserved.\r\n// =============================================================================\r\nimport { P, Q, V, nn, rest, toSEC } from \"./define.js\";\r\n\r\n// -----------------------------------------------------------------------------\r\n// LFOパラメータの分解、Web Audio APIで利用しやすい形式へ変換\r\nconst parserLFO = (strParam, tempo, gatetime) => {\r\n  const rtn = {\r\n    type: 0,\r\n    gateTime: 0,\r\n    depth: 0,\r\n    speed: 0,\r\n  };\r\n\r\n  if (strParam.length < 1) {\r\n    return rtn;\r\n  }\r\n\r\n  let ary = strParam.split(`/`) || ``;\r\n  if (ary.length === 3 || ary.length === 4) {\r\n    //  揺らぎ効果のタイプ\r\n    rtn.type = Number(ary[0]);\r\n\r\n    //  揺らぎ効果の深さ\r\n    rtn.depth = Number(ary[2]);\r\n\r\n    //  揺らぎ効果の音長\r\n    let ln = ary.length === 4 ? ary[3] : gatetime;\r\n    if (!ln.includes(`.`)) {\r\n      let tm = Number(ln);\r\n      rtn.gateTime = toSEC(tempo, tm);\r\n    } else {\r\n      let tm = Number(ln.replace(`.`, ``));\r\n      rtn.gateTime = toSEC(tempo, tm) + toSEC(tempo, tm * 2);\r\n    }\r\n\r\n    //  揺らぎ効果の回数\r\n    rtn.speed = Number(ary[1]) / rtn.gateTime;\r\n  }\r\n  return rtn;\r\n};\r\n\r\n// -----------------------------------------------------------------------------\r\n// 音階配列からWeb Audio APIの組み立て\r\n// -----------------------------------------------------------------------------\r\n//  < part >\r\n//  +-------+    +-------+    +-------+\r\n//  | osciN | -> | gainN | -> | panrN | -+\r\n//  +-------+    +-------+    +-------+  |   +--------------+    +-----+\r\n//                                       +-> | master(gain) | -> | dst |\r\n//  +-------+    +-------+    +-------+  |   +--------------+    +-----+\r\n//  | osciN | -> | gainN | -> | panrN | -+\r\n//  +-------+    +-------+    +-------+\r\n//\r\nconst assemble = (parse_result) => {\r\n  const aux = new AudioContext();\r\n  const dst = aux.destination;\r\n  const ctx = dst.context;\r\n  const ary = [];\r\n  const tm_zero = aux.currentTime;\r\n  const tm_start = tm_zero;\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // MMLパーサー処理結果をパート毎にループ処理\r\n  parse_result.forEach((part) => {\r\n    // -------------------------------------------------------------------------\r\n    // Tone Node インスタンス化\r\n    const osc = ctx.createOscillator();\r\n    const vol = ctx.createGain();\r\n    const pan = ctx.createStereoPanner();\r\n\r\n    // -------------------------------------------------------------------------\r\n    // 変数初期化\r\n    let Timing = 0; // 全体の演奏時間\r\n\r\n    // -------------------------------------------------------------------------\r\n    // LFO Node インスタンス化\r\n    // -------------------------------------------------------------------------\r\n    // 接続方法が異なるだけなので、１つのインスタンスでビブラート効果と\r\n    // トレモロ効果を切り替える方針で実装したけど…\r\n    // 'setConnectAtTime'みたいな感じで、接続方法を時系列で切り替えできない😱\r\n    // 一晩考えた結果、単純に２つのインスタンスを保持する結論に達しました\r\n\r\n    // -------------------------------------------------------------------------\r\n    // LFO Node for Vibrato\r\n    const vib_dep = ctx.createGain();\r\n    vib_dep.gain.value = 0;\r\n    vib_dep.connect(osc.frequency); // ←周波数に作用\r\n\r\n    const vib_lfo = ctx.createOscillator();\r\n    vib_lfo.frequency.value = 0;\r\n    vib_lfo.connect(vib_dep); // ←depthに接続\r\n\r\n    // -------------------------------------------------------------------------\r\n    // LFO Node for Tremolo\r\n    const tre_dep = ctx.createGain();\r\n    tre_dep.gain.value = 0;\r\n    tre_dep.connect(vol.gain); // ←音量に作用\r\n\r\n    const tre_lfo = ctx.createOscillator();\r\n    tre_lfo.frequency.value = 0;\r\n    tre_lfo.connect(tre_dep); // ←depthに接続\r\n\r\n    // -------------------------------------------------------------------------\r\n    // パートの音階配列を１音毎にループ処理\r\n    part.toneAry.forEach((tn) => {\r\n      // -----------------------------------------------------------------------\r\n      // 変数初期化\r\n      let fullTime = 0; // 音長全体の時間\r\n      let gateTime = 0; // スタッカートを考慮した発音時間\r\n\r\n      switch (tn.tn[0]) {\r\n        case rest:\r\n          {\r\n            // 休符\r\n            // -----------------------------------------------------------------\r\n            // Tone Node\r\n            osc.frequency.setValueAtTime(0, Timing);\r\n            vol.gain.setValueAtTime(0, Timing);\r\n            pan.pan.setValueAtTime(0, Timing);\r\n\r\n            // -----------------------------------------------------------------\r\n            // LFO Node\r\n            vib_dep.gain.setValueAtTime(0, Timing);\r\n            vib_lfo.frequency.setValueAtTime(0, Timing);\r\n            tre_dep.gain.setValueAtTime(0, Timing);\r\n            tre_lfo.frequency.setValueAtTime(0, Timing);\r\n\r\n            // -----------------------------------------------------------------\r\n            // 休符の場合、ゲートタイムを上限値に上書きする\r\n            tn.q = Q.max;\r\n\r\n            // -----------------------------------------------------------------\r\n            // 音長配列（付点なし、付点あり）=> 次の発音タイミング計算\r\n            tn.l.forEach((ln) => {\r\n              if (!ln.includes(`.`)) {\r\n                let tm = Number(ln);\r\n                fullTime += toSEC(tn.t, tm);\r\n              } else {\r\n                let tm = Number(ln.replace(`.`, ``));\r\n                fullTime += toSEC(tn.t, tm) + toSEC(tn.t, tm * 2);\r\n              }\r\n            });\r\n\r\n            // -----------------------------------------------------------------\r\n            // スタッカートのゲートタイム（音長）計算\r\n            gateTime = (fullTime * tn.q) / Q.max; // <= ゲートタイムを加味\r\n            Timing += gateTime;\r\n          }\r\n          break;\r\n\r\n        default:\r\n          {\r\n            // 音符\r\n            // -----------------------------------------------------------------\r\n            // 変数初期化\r\n            let subTiming = Timing;\r\n            let subgateTime = 0;\r\n\r\n            for (let idx = 0; idx < tn.tn.length; ++idx) {\r\n              if (idx === 0) {\r\n                // -------------------------------------------------------------\r\n                // 発音時点の音量\r\n                let val_vol = Math.cos((1 - tn.v[idx] / V.max) * 0.5 * Math.PI);\r\n                vol.gain.setValueAtTime(val_vol, subTiming);\r\n\r\n                // -------------------------------------------------------------\r\n                // 発音時点のパンポット\r\n                let val_pan = tn.p[idx] / P.max;\r\n                pan.pan.setValueAtTime(val_pan, subTiming);\r\n\r\n                // -------------------------------------------------------------\r\n                // 発音時点の音階（周波数）\r\n                let freq = nn[tn.o[idx]][tn.tn[idx].replace(`+`, `#`)];\r\n                osc.frequency.setValueAtTime(freq, subTiming);\r\n\r\n                // -------------------------------------------------------------\r\n                // setting LFO\r\n                let lfo_param = parserLFO(tn.m[idx] || ``, tn.t, tn.l[idx]);\r\n                switch (lfo_param.type) {\r\n                  case 1: // Vibrato\r\n                    vib_dep.gain.setValueAtTime(lfo_param.depth, subTiming);\r\n                    vib_lfo.frequency.setValueAtTime(lfo_param.speed, subTiming);\r\n                    vib_dep.gain.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    vib_lfo.frequency.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    break;\r\n                  case 2: // Tremolo\r\n                    tre_dep.gain.setValueAtTime(lfo_param.depth, subTiming);\r\n                    tre_lfo.frequency.setValueAtTime(lfo_param.speed, subTiming);\r\n                    tre_dep.gain.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    tre_lfo.frequency.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    break;\r\n                  default:\r\n                    break;\r\n                }\r\n              }\r\n\r\n              // ---------------------------------------------------------------\r\n              // 音長配列（付点なし、付点あり）=> 次の発音タイミング計算\r\n              let ln = tn.l[idx];\r\n              if (!ln.includes(`.`)) {\r\n                let tm = Number(ln);\r\n                subgateTime = toSEC(tn.t, tm);\r\n              } else {\r\n                let tm = Number(ln.replace(`.`, ``));\r\n                subgateTime = toSEC(tn.t, tm) + toSEC(tn.t, tm * 2);\r\n              }\r\n              subTiming += subgateTime;\r\n\r\n              // ---------------------------------------------------------------\r\n              // 音階配列に複数の値が入っている場合、\r\n              // 音量、パンポット、タイ or スラーの処理\r\n              if (1 < tn.tn.length && idx !== tn.tn.length - 1) {\r\n                // -------------------------------------------------------------\r\n                // 音量\r\n                let val_vol = Math.sin((tn.v[idx + 1] / V.max) * 0.5 * Math.PI);\r\n                vol.gain.linearRampToValueAtTime(val_vol, subTiming);\r\n\r\n                // -------------------------------------------------------------\r\n                // パンポット\r\n                let val_pan = tn.p[idx + 1] / P.max;\r\n                pan.pan.linearRampToValueAtTime(val_pan, subTiming);\r\n\r\n                // -------------------------------------------------------------\r\n                // 音階\r\n                let freq = nn[tn.o[idx + 1]][tn.tn[idx + 1].replace(`+`, `#`)];\r\n                // osc.frequency.linearRampToValueAtTime(freq, subTiming);\r\n                osc.frequency.exponentialRampToValueAtTime(freq, subTiming);\r\n\r\n                // -------------------------------------------------------------\r\n                // setting LFO\r\n                let lfo_param = parserLFO(tn.m[idx + 1] || ``, tn.t, tn.l[idx + 1]);\r\n                switch (lfo_param.type) {\r\n                  case 1: // Vibrato\r\n                    vib_dep.gain.setValueAtTime(lfo_param.depth, subTiming);\r\n                    vib_lfo.frequency.setValueAtTime(lfo_param.speed, subTiming);\r\n                    vib_dep.gain.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    vib_lfo.frequency.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    break;\r\n                  case 2: // Tremolo\r\n                    tre_dep.gain.setValueAtTime(lfo_param.depth, subTiming);\r\n                    tre_lfo.frequency.setValueAtTime(lfo_param.speed, subTiming);\r\n                    tre_dep.gain.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    tre_lfo.frequency.setValueAtTime(0, subTiming + lfo_param.gateTime);\r\n                    break;\r\n                  default:\r\n                    break;\r\n                }\r\n              }\r\n            }\r\n\r\n            // -----------------------------------------------------------------\r\n            // 音長配列（付点なし、付点あり）=> 次の発音タイミング計算\r\n            tn.l.forEach((ln) => {\r\n              if (!ln.includes(`.`)) {\r\n                let tm = Number(ln);\r\n                fullTime += toSEC(tn.t, tm);\r\n              } else {\r\n                let tm = Number(ln.replace(`.`, ``));\r\n                fullTime += toSEC(tn.t, tm) + toSEC(tn.t, tm * 2);\r\n              }\r\n            });\r\n\r\n            // -----------------------------------------------------------------\r\n            // スタッカートのゲートタイム（音長）計算\r\n            // -----------------------------------------------------------------\r\n            // 例）Ｑ６を指定した場合\r\n            //\r\n            // |-----1-----2-----3-----4-----5-----6-----7-----8\r\n            // |<- fullTime                                  ->|\r\n            // |<- gateTime                      ->|\r\n            //                                     |<- 無 音 ->|\r\n            //                                                 |<- 次の発音タイミング\r\n            gateTime = (fullTime * tn.q) / Q.max;\r\n            Timing += gateTime;\r\n\r\n            // -----------------------------------------------------------------\r\n            // ADSRの代用\r\n            // 音量減衰 => 次の発音タイミングまでに半分まで減衰させる\r\n            if (tn.v.length < 2) {\r\n              let val_vol = vol.gain.value;\r\n              // vol.gain.linearRampToValueAtTime(val_vol * 0.5, Timing);\r\n              vol.gain.exponentialRampToValueAtTime(val_vol * 0.5, Timing);\r\n            }\r\n          }\r\n          break;\r\n      }\r\n\r\n      // -----------------------------------------------------------------------\r\n      // スタッカートの無音時間の加算\r\n      // 一旦発音を止め、演奏全体時間（Timing）を次の発音タイミングまでスキップ\r\n      // -----------------------------------------------------------------------\r\n      // 例）Ｑ６を指定した場合\r\n      //\r\n      // |-----1-----2-----3-----4-----5-----6-----7-----8\r\n      // |<- fullTime                                  ->|\r\n      // |<- gateTime                      ->|\r\n      //                                     |<- 無 音 ->|\r\n      //                                                 |<- 次の発音タイミング\r\n      if (tn.q < Q.max) {\r\n        // ---------------------------------------------------------------------\r\n        // Tone Node\r\n        osc.frequency.setValueAtTime(0, Timing);\r\n        vol.gain.setValueAtTime(0, Timing);\r\n        pan.pan.setValueAtTime(0, Timing);\r\n\r\n        // ---------------------------------------------------------------------\r\n        // LFO Node\r\n        vib_dep.gain.setValueAtTime(0, Timing);\r\n        vib_lfo.frequency.setValueAtTime(0, Timing);\r\n        tre_dep.gain.setValueAtTime(0, Timing);\r\n        tre_lfo.frequency.setValueAtTime(0, Timing);\r\n\r\n        // ---------------------------------------------------------------------\r\n        // 無音時間の加算\r\n        Timing += fullTime - gateTime;\r\n      }\r\n    });\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Tone Oscillator\r\n    osc.type = \"square\";\r\n    osc.start(tm_start);\r\n    osc.stop(tm_start + Timing);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // LFO Oscillator for Vibrato\r\n    vib_lfo.start(tm_start);\r\n    vib_lfo.stop(tm_start + Timing);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // LFO Oscillator for Tremolo\r\n    tre_lfo.start(tm_start);\r\n    tre_lfo.stop(tm_start + Timing);\r\n\r\n    // -------------------------------------------------------------------------\r\n    //  +-------+    +-------+    +-------+      +-------+\r\n    //  | osciN | -> | gainN | -> | panrN |  =>  |  ary  |\r\n    //  +-------+    +-------+    +-------+      +-------+\r\n    osc.connect(vol);\r\n    vol.connect(pan);\r\n    ary.push(pan);\r\n  });\r\n\r\n  // ---------------------------------------------------------------------------\r\n  //  +-------+      +--------+    +-------+\r\n  //  |  ary  |  =>  | master | -> |  dst  |\r\n  //  +-------+      +--------+    +-------+\r\n  // const master = ctx.createGain();\r\n  // master.gain.value = 1;\r\n  // ary.forEach((x) => x.connect(master));\r\n  // master.connect(dst);\r\n\r\n  // ---------------------------------------------------------------------------\r\n  //  +-------+      +-------+\r\n  //  |  ary  |  =>  |  dst  |\r\n  //  +-------+      +-------+\r\n  ary.forEach((x) => x.connect(dst));\r\n\r\n  return aux;\r\n};\r\n\r\nexport { assemble };\r\n","// =============================================================================\r\n// parser.js\r\n// Copyright © 2021- gaku.iwa All Rights Reserved.\r\n// =============================================================================\r\nimport { O, P, Q, T, V } from \"./define.js\";\r\n\r\n// -----------------------------------------------------------------------------\r\n// 制御配列を逆順に検索して、制御キーから設定値を取得する\r\n// -----------------------------------------------------------------------------\r\n// `t`:テンポ         1 ~ 480\r\n// `v`:音量           0 ~ 15\r\n// `!`:一時的な音量   0 ~ 15\r\n// `p`:パン          -8 ~ 0 ~ +8、左〜中央〜右\r\n// `o`:オクターブ     1 ~ 9\r\n// `q`:ゲートタイム   1 ~ 8、スタッカート的な効果\r\n// `l`:音長\r\n// `&`:タイ or スラー\r\nconst searchCTRL = (ary, chr, def) => {\r\n  let rtn = { key: chr, value: def, index: -1 };\r\n  for (var i = ary.length - 1; i >= 0; --i) {\r\n    if (ary[i].ctrl !== chr) continue;\r\n    rtn.value = Number(ary[i].param);\r\n    rtn.index = i;\r\n    break;\r\n  }\r\n  return rtn;\r\n};\r\n\r\n// -----------------------------------------------------------------------------\r\n// 制御配列を逆順に検索して、制御キーから設定値を取得する\r\n// -----------------------------------------------------------------------------\r\n// `m`:LFO\r\nconst searchLFO = (ary, chr) => {\r\n  let rtn = { key: chr, value: ``, index: -1 };\r\n  for (var i = ary.length - 1; i >= 0; --i) {\r\n    if (ary[i].ctrl !== chr) continue;\r\n    rtn.value = ary[i].param;\r\n    rtn.index = i;\r\n    break;\r\n  }\r\n  return rtn;\r\n};\r\n\r\n// -----------------------------------------------------------------------------\r\n// 制御配列と音階データから、Web Audio APIで利用しやすい形式へ変換\r\nconst convert = (ary, tn) => {\r\n  const rtn = {\r\n    t: Math.max(Math.min(searchCTRL(ary, `t`, T.def).value, T.max), T.min),\r\n    v: Math.max(Math.min(searchCTRL(ary, `v`, V.def).value, V.max), V.min),\r\n    p: Math.max(Math.min(searchCTRL(ary, `p`, P.def).value, P.max), P.min),\r\n    o: Math.max(Math.min(searchCTRL(ary, `o`, O.def).value, O.max), O.min),\r\n    q: Math.max(Math.min(searchCTRL(ary, `q`, Q.def).value, Q.max), Q.min),\r\n    tn: `c`,\r\n    l: `4`,\r\n    j: 0,\r\n    m: ``,\r\n  };\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // 音階指定の前に一時的な音量指定があった場合\r\n  // 判定後、一時的な指定音量へ変更し、制御配列から取り除く\r\n  let v = searchCTRL(ary, `!`, V.def);\r\n  if (v.index !== -1) {\r\n    rtn.v = Math.max(Math.min(v.value, V.max), V.min);\r\n    ary.splice(v.index, 1);\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // 音階指定の前にタイorスラー指定があった場合\r\n  // 判定後、jointフラグを立てて、制御配列から取り除く\r\n  let j = searchCTRL(ary, `&`, rtn.j);\r\n  rtn.j = Math.max(Math.min(j.value, 1), 0);\r\n  if (rtn.j === 1) {\r\n    ary.splice(j.index, 1);\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // LFO\r\n  // 判定後、制御配列から取り除く\r\n  let m = searchLFO(ary, `m`);\r\n  if (m.index !== -1) {\r\n    rtn.m = m.value;\r\n    ary.splice(m.index, 1);\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // 音長\r\n  let l = searchCTRL(ary, `l`, rtn.l);\r\n  rtn.l = tn.len === `` ? l.value.toString() : tn.len === `.` ? l.value.toString() + `.` : tn.len;\r\n\r\n  // ---------------------------------------------------------------------------\r\n  // 音階\r\n  rtn.tn = (tn.tone + `  `).slice(0, 2);\r\n  return rtn;\r\n};\r\n\r\n// -----------------------------------------------------------------------------\r\n// MMLパーサー\r\nconst parser = (mml_part) => {\r\n  const parser_result = [];\r\n  mml_part.forEach((mml) => {\r\n    let tmp = { ctrl:``, param:``, tone:``, len:``, };\r\n    let dmy = JSON.parse(JSON.stringify(tmp));\r\n    let ctrlAry = [];\r\n    let toneAry = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // ひと文字ずつ読み込んで、\r\n    // 制御配列（ctrlAry） or 音階配列（toneAry）へ積み込む\r\n    Array.prototype.forEach.call(mml, (item) => {\r\n      const chr = item.toLowerCase();\r\n      switch (chr) {\r\n        case `t`:\r\n        case `v`:\r\n        case `p`:\r\n        case `o`:\r\n        case `l`:\r\n        case `q`:\r\n        case `>`:\r\n        case `<`:\r\n        case `!`:\r\n        case `m`:\r\n          if (dmy.ctrl !== chr || dmy.tone !== chr) {\r\n            if (dmy.ctrl !== ``) ctrlAry.push(dmy);\r\n            if (dmy.tone !== ``) toneAry.push(convert(ctrlAry, dmy));\r\n            dmy = JSON.parse(JSON.stringify(tmp));\r\n          }\r\n          switch (chr) {\r\n            case `t`: // テンポ\r\n              dmy.ctrl = `t`;\r\n              break;\r\n            case `v`: // 音量\r\n              dmy.ctrl = `v`;\r\n              break;\r\n            case `p`: // パン\r\n              dmy.ctrl = `p`;\r\n              break;\r\n            case `o`: // 音階\r\n              dmy.ctrl = `o`;\r\n              break;\r\n            case `q`: // ゲートタイム\r\n              dmy.ctrl = `q`;\r\n              break;\r\n            case `l`: // 音長\r\n              dmy.ctrl = `l`;\r\n              break;\r\n            case `>`: // オクターブ上げ\r\n              {\r\n                let o = searchCTRL(ctrlAry, `o`, 4);\r\n                dmy.ctrl = o.key;\r\n                dmy.param = (o.value + 1).toString();\r\n              }\r\n              break;\r\n            case `<`: // オクターブ下げ\r\n              {\r\n                let o = searchCTRL(ctrlAry, `o`, 4);\r\n                dmy.ctrl = o.key;\r\n                dmy.param = (o.value - 1).toString();\r\n              }\r\n              break;\r\n            case `!`: // 一時的な音量\r\n              dmy.ctrl = `!`;\r\n              break;\r\n            case `m`: // LFO\r\n              dmy.ctrl = `m`;\r\n              break;\r\n          }\r\n          break;\r\n\r\n        case `&`: // タイ or スラー\r\n          if (dmy.ctrl !== chr || dmy.tone !== chr) {\r\n            if (dmy.ctrl !== ``) ctrlAry.push(dmy);\r\n            if (dmy.tone !== ``) toneAry.push(convert(ctrlAry, dmy));\r\n            dmy = JSON.parse(JSON.stringify(tmp));\r\n            dmy.ctrl = `&`;\r\n            dmy.param = `1`;\r\n          }\r\n          break;\r\n\r\n        case `r`: // 休符\r\n        case `a`: // 音階 ラ\r\n        case `b`: // 音階 シ\r\n        case `c`: // 音階 ド\r\n        case `d`: // 音階 レ\r\n        case `e`: // 音階 ミ\r\n        case `f`: // 音階 ファ\r\n        case `g`: // 音階 ソ\r\n          if (dmy.ctrl !== chr || dmy.tone !== chr) {\r\n            if (dmy.ctrl !== ``) ctrlAry.push(dmy);\r\n            if (dmy.tone !== ``) toneAry.push(convert(ctrlAry, dmy));\r\n            dmy = JSON.parse(JSON.stringify(tmp));\r\n          }\r\n          dmy.tone += chr;\r\n          break;\r\n\r\n        case `-`: // 半音サゲ or 負パラメータ\r\n        case `+`: // 半音アゲ or 正パラメータ\r\n        case `#`: // 半音アゲ ← 音階の後の記述のみ有効\r\n          if (dmy.tone.length === 1 && `a` <= dmy.tone && dmy.tone <= `g`) {\r\n            dmy.tone += chr;\r\n          }\r\n          if (dmy.ctrl === `p` && (chr === `-` || chr === `+`)) {\r\n            dmy.param += chr;\r\n          }\r\n          break;\r\n\r\n        case `.`: // 付点←連続した付点（二重、三重）は、２個目以降は無視\r\n                  // LFOパラメータ｜小数値\r\n          if (dmy.ctrl === `m`) dmy.param += chr;\r\n          if (dmy.tone !== `` && !dmy.len.includes(`.`)) {\r\n            dmy.len += chr;\r\n          }\r\n          break;\r\n\r\n        case `/`: // LFOパラメータ｜区切り文字\r\n          if (dmy.ctrl === `m`) dmy.param += chr;\r\n          break;\r\n\r\n        case `0`:\r\n        case `1`:\r\n        case `2`:\r\n        case `3`:\r\n        case `4`:\r\n        case `5`:\r\n        case `6`:\r\n        case `7`:\r\n        case `8`:\r\n        case `9`:\r\n          if (dmy.ctrl !== ``) dmy.param += chr;\r\n          if (dmy.tone !== ``) dmy.len += chr;\r\n          break;\r\n\r\n        default: // 無視\r\n      }\r\n    });\r\n\r\n    // -------------------------------------------------------------------------\r\n    // 最後の要素を積み込んでいないので、\r\n    // 制御配列（ctrlAry） or 音階配列（toneAry）へ積み込む\r\n    if (dmy.ctrl !== ``) ctrlAry.push(dmy);\r\n    if (dmy.tone !== ``) toneAry.push(convert(ctrlAry, dmy));\r\n\r\n    // -------------------------------------------------------------------------\r\n    // １音ずつの音階配列から「＆」による音の結合を考慮して、\r\n    // 音量、パンポット、オクターブ、音長、音階を配列化する\r\n    // テンポとゲートタイムは、結合前の指定値を採用する\r\n    let tmpAry = [];\r\n    for (let loop = 0; loop < toneAry.length; ++loop) {\r\n      let rtn = {\r\n        t: toneAry[loop].t,\r\n        q: toneAry[loop].q,\r\n        v: [],\r\n        p: [],\r\n        o: [],\r\n        l: [],\r\n        m: [],\r\n        tn: [],\r\n      };\r\n      if (toneAry[loop].j === 1) {\r\n        // ＆記号あり、前要素からの延長\r\n        if (0 < tmpAry.length) {\r\n          rtn = tmpAry[tmpAry.length - 1];\r\n          rtn.v.push(toneAry[loop].v);\r\n          rtn.p.push(toneAry[loop].p);\r\n          rtn.o.push(toneAry[loop].o);\r\n          rtn.l.push(toneAry[loop].l);\r\n          rtn.m.push(toneAry[loop].m);\r\n          rtn.tn.push(toneAry[loop].tn);\r\n        } else {\r\n          rtn.v.push(toneAry[loop].v);\r\n          rtn.p.push(toneAry[loop].p);\r\n          rtn.o.push(toneAry[loop].o);\r\n          rtn.l.push(toneAry[loop].l);\r\n          rtn.m.push(toneAry[loop].m);\r\n          rtn.tn.push(toneAry[loop].tn);\r\n          tmpAry.push(rtn);\r\n        }\r\n      } else {\r\n        // ＆記号なし、新要素として追加\r\n        rtn.v.push(toneAry[loop].v);\r\n        rtn.p.push(toneAry[loop].p);\r\n        rtn.o.push(toneAry[loop].o);\r\n        rtn.l.push(toneAry[loop].l);\r\n        rtn.m.push(toneAry[loop].m);\r\n        rtn.tn.push(toneAry[loop].tn);\r\n        tmpAry.push(rtn);\r\n      }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // デバッグログ\r\n    tmpAry.forEach((x) => {\r\n      console.log(`T${(\"   \" + x.t.toString()).slice(-3)} Q[${x.q}] V[${x.v}] P[${x.p}] O[${x.o}][${x.tn}] L[${x.l}] LFO[${x.m}]`);\r\n    });\r\n    console.log(\"-\".repeat(40));\r\n\r\n    // -------------------------------------------------------------------------\r\n    // パース結果をパート配列へ\r\n    let part = {};\r\n    part.toneAry = tmpAry;\r\n    parser_result.push(part);\r\n  });\r\n  return parser_result;\r\n};\r\n\r\nexport { parser };\r\n","// =============================================================================\r\n// play.js\r\n// Copyright © 2021- gaku.iwa All Rights Reserved.\r\n// =============================================================================\r\nimport { assemble } from \"./assemble.js\";\r\nimport { parser } from \"./parser.js\";\r\n\r\n// -----------------------------------------------------------------------------\r\n// MML再生（mml配列インデックス指定）\r\nconst play = (idx) => {\r\n  if (mml_data.mml.length - 1 < idx) return;\r\n  let val = mml_data.mml[idx].part || ``;\r\n  if (val === ``) return;\r\n  return assemble(parser(val));\r\n};\r\n\r\nexport { play };\r\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","toSEC","tempo","length","toHz","num","Math","pow","nn","parserLFO","strParam","gatetime","rtn","type","gateTime","depth","speed","ary","split","Number","ln","includes","tm","replace","assemble","parse_result","aux","AudioContext","dst","destination","ctx","context","tm_start","currentTime","forEach","part","osc","createOscillator","vol","createGain","pan","createStereoPanner","Timing","vib_dep","gain","connect","frequency","vib_lfo","tre_dep","tre_lfo","toneAry","tn","fullTime","setValueAtTime","q","l","t","subTiming","subgateTime","idx","val_vol","cos","v","PI","val_pan","p","freq","lfo_param","m","sin","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","push","x","searchCTRL","chr","def","index","i","ctrl","param","convert","max","min","j","splice","searchLFO","len","toString","tone","slice","parser","mml_part","parser_result","mml","tmp","dmy","JSON","parse","stringify","ctrlAry","Array","item","toLowerCase","tmpAry","loop","console","log","repeat","play","mml_data","val"],"sourceRoot":""}